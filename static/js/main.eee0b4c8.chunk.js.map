{"version":3,"sources":["components/todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["todo","props","state","name","todoListName","index","console","log","this","removeHandler","nextProps","setState","nameList","map","className","key","id","onClick","removeTodo","Component","TodoList","todoListCount","term","saveDataInMap","bind","e","preventDefault","updatedTodoList","push","arr","filter","i","onSubmit","type","placeholder","value","onChange","target","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQA+BeA,G,KA7Bf,kDACI,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,KAAO,EAAKF,MAAMG,cAHR,EADtB,uDAOeC,GACPC,QAAQC,IAAIF,GACZG,KAAKP,MAAMQ,cAAcJ,KATjC,gDAW8BK,GACtBF,KAAKG,SAAS,CAAER,KAAMO,EAAUN,iBAZxC,+BAcc,IAAD,OACCQ,EAAWJ,KAAKN,MAAMC,KAAKU,KAAI,SAACV,EAAKE,GAAN,OACjC,yBAAKS,UAAU,YAAYC,IAAKV,GAC3BF,EACD,4BAAQW,UAAU,yBAAyBE,GAAIX,EAAOU,IAAKV,EAAOY,QAAS,kBAAK,EAAKC,WAAW,CAACb,iBAGzG,OACI,6BACKO,OAvBjB,GAA0BO,cC+DXC,E,kDA5DX,aAAc,IAAD,8BACT,gBACKlB,MAAM,CACPmB,cAAgB,EAChBjB,aAAe,GACfkB,KAAK,IAET,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKf,cAAgB,EAAKA,cAAce,KAAnB,gBARZ,E,0DAUCC,GACVA,EAAEC,iBACF,IAAIC,EAAe,YAAOnB,KAAKN,MAAME,cACrCuB,EAAgBC,KAAKpB,KAAKN,MAAMoB,MAC5Bd,KAAKG,SAAS,CACVU,cAAgBb,KAAKN,MAAMmB,cAAgB,EACzCjB,aAAeuB,EAChBL,KAAO,O,oCAGNjB,GACV,IAAIwB,EAAMrB,KAAKN,MAAME,aAAa0B,QAAO,SAAC3B,EAAK4B,GAC3C,OAAOA,IAAM1B,EAAMA,SAEvBC,QAAQC,IAAIsB,GACZrB,KAAKG,SAAS,CACVP,aAAeyB,EACfR,cAAgBb,KAAKN,MAAMmB,cAAe,M,+BAGxC,IAAD,OAEL,OACI,yBAAKP,UAAU,WACX,yBAAKA,UAAU,cACf,yBAAKA,UAAU,eACX,wBAAIA,UAAU,4BAAd,YACcN,KAAKN,MAAMmB,cADzB,WAIA,yBAAKP,UAAU,gBACX,kBAAC,EAAD,CAAMV,aAAcI,KAAKN,MAAME,aAAcK,cAAeD,KAAKC,iBAErE,0BAAMuB,SAAUxB,KAAKe,eACjB,2BACAU,KAAK,OACLnB,UAAU,QACVoB,YAAY,aACZC,MAAO3B,KAAKN,MAAMoB,KAClBc,SAAU,SAACX,GAAD,OAAO,EAAKd,SAAS,CAACW,KAAMG,EAAEY,OAAOF,WAE/C,4BAAQrB,UAAU,SAASwB,SAA4B,KAAlB9B,KAAKN,MAAMoB,MAAhD,iB,GApDDH,aCMRoB,MARf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,QCOc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.eee0b4c8.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './css/todo.css'\nexport class todo extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            name : this.props.todoListName\n        }\n    }\n    removeTodo(index){\n        console.log(index);\n        this.props.removeHandler(index);        \n    }\n    componentWillReceiveProps(nextProps) {\n        this.setState({ name: nextProps.todoListName });  \n      }\n    render() {\n        const nameList = this.state.name.map((name,index) =>(\n            <div className=\"list-item\" key={index}>\n                {name}\n                <button className=\"delete is-pulled-right\" id={index} key={index} onClick={() =>this.removeTodo({index})}></button>\n            </div>\n        ));\n        return (\n            <div>\n                {nameList}\n            </div>\n        )\n    }\n}\n\nexport default todo\n","import React, { Component } from 'react'\nimport Todo from './todo';\nimport './css/todo.css'\n\nclass TodoList extends Component {\n    constructor(){\n        super();\n        this.state={\n            todoListCount : 0,\n            todoListName : [],\n            term:''\n        }\n        this.saveDataInMap = this.saveDataInMap.bind(this);\n        this.removeHandler = this.removeHandler.bind(this);\n    }\n    saveDataInMap(e){\n        e.preventDefault();\n        let updatedTodoList = [...this.state.todoListName]\n        updatedTodoList.push(this.state.term);\n            this.setState({\n                todoListCount : this.state.todoListCount + 1\n                , todoListName : updatedTodoList\n                ,term : ''                \n            })\n    }\n    removeHandler(index){\n        let arr = this.state.todoListName.filter((name,i) => {\n            return i !== index.index; \n        });\n        console.log(arr);\n        this.setState({\n            todoListName : arr,\n            todoListCount : this.state.todoListCount -1\n        })\n    }\n    render() {\n\n        return (\n            <div className='wrapper'>\n                <div className='card frame'>\n                <div className='card-header'>\n                    <h4 className='card-header-title header'>\n                        You have {this.state.todoListCount} Todos\n                    </h4>\n                    </div>\n                    <div className='list-wrapper'>\n                        <Todo todoListName={this.state.todoListName} removeHandler={this.removeHandler}></Todo>\n                    </div>\n                    <form onSubmit={this.saveDataInMap}>\n                        <input \n                        type='text'\n                        className='input'\n                        placeholder='Enter Item'\n                        value={this.state.term}\n                        onChange={(e) => this.setState({term: e.target.value})}\n                        />\n                        <button className='button' disabled={this.state.term===''?true:false}>Submit</button>\n                    </form>\n                </div>\n            </div>\n           \n        )\n    }\n}\n\nexport default TodoList\n","import React from 'react';\nimport TodoList from './components/TodoList'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList></TodoList>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bulma/css/bulma.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}